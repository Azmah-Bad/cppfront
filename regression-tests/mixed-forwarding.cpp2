#include <iostream>
#include <utility>

struct X {
    int i;
    X(int i)         : i{     i} { std::cout << "+X "     << i << "\n"; }
    X(X const& that) : i{that.i} { std::cout << "copy X " << i << "\n"; }
    X(X &&     that) : i{that.i} { std::cout << "move X " << i << "\n"; }
};

discard: (copy x:_) = { }

apply_implicit_forward: (forward t: std::pair<X, X>) = {
    discard(t.first);
    discard(t.second);
}

apply_explicit_forward: (forward t: std::pair<X, X>) = {
    discard(forward t.first);
    discard(forward t.second);
}

main: ()->int = {
    t1: std::pair<X,X> = (1,2);
    apply_implicit_forward(t1);

    t2: std::pair<X,X> = (3,4);
    apply_explicit_forward(t2);
}
